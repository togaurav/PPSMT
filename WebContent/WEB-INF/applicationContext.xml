<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oxm="http://www.springframework.org/schema/oxm"  
	xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
     	http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd    
      	http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/oxm 
		http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
        http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"  
    default-autowire="byName" default-lazy-init="false" >
    
    <context:annotation-config/>
    <context:property-placeholder location="/WEB-INF/jdbc.properties" />
    <!-- Spring 通过自动扫描来查询和管理Bean -->
    <context:component-scan base-package="com.ppstream.mt"></context:component-scan>
    <!-- 
    	声明aspectj动态代理，启用注解驱动的aspectj配置   需要使用CGLIB代理和@AspectJ自动代理支持,proxy-target-class的默认值是false
    	JDK动态代理：其代理对象必须是某个接口的实现，它是通过在运行期间创建一个接口的实现类来完成对目标对象的代理。
		CGLIB代理：实现原理类似于JDK动态代理，只是它在运行期间生成的代理对象是针对目标类扩展的子类。 
	-->
    <aop:aspectj-autoproxy />
   
    <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" />
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="lobHandler" ref="lobHandler"/>
        <!-- <property name="dataSource" ref="dataSource"/>  -->
        <property name="packagesToScan" value="com.ppstream.mt.entity"/>                        <!-- 此处hibernate实体包  -->
        <property name="hibernateProperties">
        	<props>  
                <!--
                <prop key="hibernate.format_sql">true</prop>  
                <prop key="hibernate.hbm2ddl.auto">auto</prop> 
                <prop key="hibernate.show_sql">true</prop>   
                -->  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>  
                <!--指定Proxool的alias，必须与Proxool的配置文件中的alias一致-->      
                <prop key="hibernate.proxool.pool_alias">datasource</prop>    
                <!--指定Proxool配置文件-->     
                <prop key="hibernate.proxool.xml">${hibernate.proxool}</prop>    
                <prop key="hibernate.connection.provider_class">    
                    org.hibernate.connection.ProxoolConnectionProvider    
                </prop>   
                
				<prop key="hibernate.cache.use_second_level_cache">true</prop>  
				<prop key="hibernate.cache.configurationResourceName">/WEB-INF/ehcache.xml</prop>  
				<prop key="hibernate.cache.use_query_cache">true</prop>  
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>  

            </props>  
        </property>
       	<property name="eventListeners">  
           <map>  
               <entry key="merge">  
                   <bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>  
               </entry>  
           </map>  
       	</property>
    </bean>
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
    <bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true"/>
	
</beans>