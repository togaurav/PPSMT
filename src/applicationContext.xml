<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
     	http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd    
      	http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/oxm 
		http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
        http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">

	<context:annotation-config />
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- Spring 通过自动扫描来查询和管理Bean -->
	<context:component-scan base-package="com.ppstream.mt"></context:component-scan>
	<!-- 
		声明aspectj动态代理，启用注解驱动的aspectj配置 需要使用CGLIB代理和@AspectJ自动代理支持,proxy-target-class的默认值是false 
		JDK动态代理：其代理对象必须是某个接口的实现，它是通过在运行期间创建一个接口的实现类来完成对目标对象的代理。 
		CGLIB代理：实现原理类似于JDK动态代理，只是它在运行期间生成的代理对象是针对目标类扩展的子类。
	-->
	<aop:aspectj-autoproxy />

	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" />
	
    <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
	   <property name="driverClass" value="${jdbc.driver}" />
	   <property name="jdbcUrl" value="${jdbc.url}" />
	   <property name="username" value="${jdbc.user}"/>
	   <property name="password" value="${jdbc.pass}"/>
	   <property name="idleConnectionTestPeriod" value="60"/>
	   <property name="idleMaxAge" value="240"/>
	   <property name="maxConnectionsPerPartition" value="30"/>
	   <property name="minConnectionsPerPartition" value="10"/>
	   <property name="partitionCount" value="3"/>
	   <property name="acquireIncrement" value="5"/>
	   <property name="statementsCacheSize" value="100"/>
	   <property name="releaseHelperThreads" value="3"/>
	</bean>
    

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="lobHandler" ref="lobHandler" />
		<!-- <property name="dataSource" ref="dataSource"/> -->
		<property name="packagesToScan" value="com.ppstream.mt.entity" />                        <!-- 此处hibernate实体包 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				
				<prop key="hibernate.jdbc.batch_size">50</prop>  <!-- batch_size参数值越大，读数据库的次数越少，速度越快。 -->
                <prop key="hibernate.jdbc.fetch_size">50</prop>    <!-- 指定JDBC抓取数量的大小 (调用Statement.setFetchSize()) -->
                <prop key="hibernate.default_batch_fetch_size">50</prop>
				
				<!-- 
					<prop key="hibernate.format_sql">true</prop> 
					<prop key="hibernate.hbm2ddl.auto">auto</prop> 
					<prop key="hibernate.show_sql">true</prop>
				 -->
				<!-- EhCache
					<prop key="hibernate.cache.use_second_level_cache">false</prop> 
					<prop key="hibernate.cache.use_query_cache">false</prop>
					<prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop> 
                	在org.hibernate.Transaction结束后释放连接
                	<prop key="hibernate.connection.release_mode">after_transaction</prop>
					是否优化二级缓存来最小化读写操作 
                	<prop key="hibernate.cache.use_minimal_puts">true</prop>
				-->
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean
						class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener" />
				</entry>
			</map>
		</property>
	</bean>
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />

	<!--  对模型视图名称的解析，即在模型视图名称添加前后缀,在requestmapping输入的地址后自动调用该类进行视图解析-->	
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">	
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp"></property>
	</bean>
</beans>