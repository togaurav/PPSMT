<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
     	http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd    
      	http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/oxm 
		http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
        http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">

	<context:annotation-config />
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- Spring 通过自动扫描来查询和管理Bean -->
	<context:component-scan base-package="com.ppstream.mt"></context:component-scan>
	<!-- 声明aspectj动态代理，启用注解驱动的aspectj配置 需要使用CGLIB代理和@AspectJ自动代理支持,proxy-target-class的默认值是false 
		JDK动态代理：其代理对象必须是某个接口的实现，它是通过在运行期间创建一个接口的实现类来完成对目标对象的代理。 CGLIB代理：实现原理类似于JDK动态代理，只是它在运行期间生成的代理对象是针对目标类扩展的子类。 -->
	<aop:aspectj-autoproxy />

	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
		lazy-init="true" />

	<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<!--  
		<property name="driverClassName">
			<value>org.logicalcobwebs.proxool.ProxoolDriver</value>
		</property>
		<property name="url">
			<value>proxool.proxooldb</value>
		</property>
		-->
		<property name="driver">
	        <value>oracle.jdbc.OracleDriver</value>
	    </property>
		<property name="driverUrl">
	        <value>jdbc:oracle:thin:@10.1.20.40:1521:pps</value>
	    </property>
	    <property name="user" value="ppsclient" />
	    <property name="password" value="ppsclient" />
	    <property name="alias" value="proxool_db" />
	    <!-- proxool自动侦察各个连接状态的时间间隔(毫秒),侦察到空闲的连接就马上回收,超时的销毁。  
	    <property name="houseKeepingSleepTime" value="90000" /> -->  
	    <!-- 最少保持的空闲连接数 
	    <property name="prototypeCount" value="0" />
	    <property name="maximumConnectionCount" value="50" />
	    <property name="minimumConnectionCount" value="2" />
	    <property name="simultaneousBuildThrottle" value="50" />
	    <property name="maximumConnectionLifetime" value="14400000" /> -->   
	    <!-- 
	    <property name="houseKeepingTestSql" value="select CURRENT_DATE" />
	     -->
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="lobHandler" ref="lobHandler" />
		<!-- <property name="dataSource" ref="dataSource"/> -->
		<property name="packagesToScan" value="com.ppstream.mt.entity" />                        <!-- 此处hibernate实体包 -->
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.format_sql">true</prop> <prop key="hibernate.hbm2ddl.auto">auto</prop> 
					<prop key="hibernate.show_sql">true</prop> -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 指定Proxool的alias，必须与Proxool的配置文件中的alias一致 
				<prop key="hibernate.proxool.pool_alias">datasource</prop> 
					<prop key="hibernate.proxool.xml">${hibernate.proxool}</prop> 
					<prop key="hibernate.connection.provider_class">org.hibernate.connection.ProxoolConnectionProvider</prop> 
					-->
				<!-- hibernate 3.3以上和以下写法有区别 
				<prop key="hibernate.cache.use_second_level_cache">false</prop> 
					<prop key="hibernate.cache.use_query_cache">false</prop> 
					<prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop> 
					-->
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean
						class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener" />
				</entry>
			</map>
		</property>
	</bean>
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager"
		proxy-target-class="true" />

</beans>